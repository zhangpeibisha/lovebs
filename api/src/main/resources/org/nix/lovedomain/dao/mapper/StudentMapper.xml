<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.nix.lovedomain.dao.mapper.StudentMapper">
  <resultMap id="BaseResultMap" type="org.nix.lovedomain.model.Student">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="studentId" jdbcType="VARCHAR" property="studentid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="imageUrl" jdbcType="VARCHAR" property="imageurl" />
    <result column="classId" jdbcType="INTEGER" property="classid" />
    <result column="accountId" jdbcType="INTEGER" property="accountid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.nix.lovedomain.model.Student">
    <result column="task" jdbcType="LONGVARCHAR" property="task" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, studentId, name, phone, email, imageUrl, classId, accountId,task
  </sql>
  <sql id="Blob_Column_List">
    task
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.nix.lovedomain.model.StudentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.nix.lovedomain.model.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from student
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.nix.lovedomain.model.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.nix.lovedomain.model.Student">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student (studentId, name, phone, 
      email, imageUrl, classId, 
      accountId, task)
    values (#{studentid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{imageurl,jdbcType=VARCHAR}, #{classid,jdbcType=INTEGER}, 
      #{accountid,jdbcType=INTEGER}, #{task,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.nix.lovedomain.model.Student">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        studentId,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="imageurl != null">
        imageUrl,
      </if>
      <if test="classid != null">
        classId,
      </if>
      <if test="accountid != null">
        accountId,
      </if>
      <if test="task != null">
        task,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        #{studentid,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="imageurl != null">
        #{imageurl,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="accountid != null">
        #{accountid,jdbcType=INTEGER},
      </if>
      <if test="task != null">
        #{task,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.nix.lovedomain.model.StudentExample" resultType="java.lang.Integer">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null">
        studentId = #{record.studentid,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.imageurl != null">
        imageUrl = #{record.imageurl,jdbcType=VARCHAR},
      </if>
      <if test="record.classid != null">
        classId = #{record.classid,jdbcType=INTEGER},
      </if>
      <if test="record.accountid != null">
        accountId = #{record.accountid,jdbcType=INTEGER},
      </if>
      <if test="record.task != null">
        task = #{record.task,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update student
    set id = #{record.id,jdbcType=INTEGER},
      studentId = #{record.studentid,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      imageUrl = #{record.imageurl,jdbcType=VARCHAR},
      classId = #{record.classid,jdbcType=INTEGER},
      accountId = #{record.accountid,jdbcType=INTEGER},
      task = #{record.task,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set id = #{record.id,jdbcType=INTEGER},
      studentId = #{record.studentid,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      imageUrl = #{record.imageurl,jdbcType=VARCHAR},
      classId = #{record.classid,jdbcType=INTEGER},
      accountId = #{record.accountid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.nix.lovedomain.model.Student">
    update student
    <set>
      <if test="studentid != null">
        studentId = #{studentid,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="imageurl != null">
        imageUrl = #{imageurl,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        classId = #{classid,jdbcType=INTEGER},
      </if>
      <if test="accountid != null">
        accountId = #{accountid,jdbcType=INTEGER},
      </if>
      <if test="task != null">
        task = #{task,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.nix.lovedomain.model.Student">
    update student
    set studentId = #{studentid,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      imageUrl = #{imageurl,jdbcType=VARCHAR},
      classId = #{classid,jdbcType=INTEGER},
      accountId = #{accountid,jdbcType=INTEGER},
      task = #{task,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.nix.lovedomain.model.Student">
    update student
    set studentId = #{studentid,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      imageUrl = #{imageurl,jdbcType=VARCHAR},
      classId = #{classid,jdbcType=INTEGER},
      accountId = #{accountid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getStudentByCourse" resultMap="BaseResultMap">
    SELECT
	student.studentId AS studentid,
	student.`name`,
	email,
	phone
      FROM
          student LEFT JOIN student_course ON student.id = student_course.studentId
        LEFT JOIN teacher_course ON student_course.courseId = teacher_course.id
      WHERE teacher_course.courseId = #{courseId,jdbcType=INTEGER}
      AND teacher_course.teacherId = #{teacherId,jdbcType=INTEGER}
    SELECT student.studentId as studentid,
           student.`name` as `name`,
           email,
           phone
      FROM student,
      (SELECT id as stuid
      FROM student_course,
      (SELECT id as cour_id
      FROM teacher_course
      WHERE teacher_course.teacherId = #{teacherId,jdbcType=INTEGER} AND
      teacher_course.courseId = #{courseId,jdbcType=INTEGER}) as cour_ids
      WHERE student_course.courseId = cour_ids.cour_id) as stuids
      WHERE student.studentId = stuids.stuid
  </select>

  <update id="writeStudentTask" parameterType="java.util.List">
    <foreach collection="students" item="student"  index="index" open="" close="" separator=";">
      update
          student
      <set>
        task = #{student.task,jdbcType=VARCHAR}
      </set>
        where studentId = #{student.studentid,jdbcType=INTEGER}
    </foreach>
  </update>

</mapper>