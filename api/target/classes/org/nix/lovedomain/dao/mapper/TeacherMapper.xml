<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.nix.lovedomain.dao.mapper.TeacherMapper">
  <resultMap id="BaseResultMap" type="org.nix.lovedomain.model.Teacher">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="jobNumber" jdbcType="VARCHAR" property="jobnumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="accountId" jdbcType="INTEGER" property="accountid" />
    <result column="email" jdbcType="INTEGER" property="email" />
    <result column="phone" jdbcType="INTEGER" property="phone"/>
    <result column="imagerUrl" jdbcType="VARCHAR" property="imagerurl" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.nix.lovedomain.model.Teacher">
    <result column="workJson" jdbcType="LONGVARCHAR" property="workjson" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, jobNumber, `name`, accountId, imagerUrl,email,phone
  </sql>
  <sql id="Blob_Column_List">
    workJson
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.nix.lovedomain.model.TeacherExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.nix.lovedomain.model.TeacherExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from teacher
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from teacher
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.nix.lovedomain.model.TeacherExample">
    delete from teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.nix.lovedomain.model.Teacher">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into teacher (jobNumber, name, accountId, 
      imagerUrl, workJson)
    values (#{jobnumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{accountid,jdbcType=INTEGER}, 
      #{imagerurl,jdbcType=VARCHAR}, #{workjson,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.nix.lovedomain.model.Teacher">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into teacher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobnumber != null">
        jobNumber,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="accountid != null">
        accountId,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="imagerurl != null">
        imagerUrl,
      </if>
      <if test="workjson != null">
        workJson,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobnumber != null">
        #{jobnumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="accountid != null">
        #{accountid,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHER},
      </if>
      <if test="imagerurl != null">
        #{imagerurl,jdbcType=VARCHAR},
      </if>
      <if test="workjson != null">
        #{workjson,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.nix.lovedomain.model.TeacherExample" resultType="java.lang.Integer">
    select count(*) from teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update teacher
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.jobnumber != null">
        jobNumber = #{record.jobnumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.accountid != null">
        accountId = #{record.accountid,jdbcType=INTEGER},
      </if>
      <if test="record.imagerurl != null">
        imagerUrl = #{record.imagerurl,jdbcType=VARCHAR},
      </if>
      <if test="record.workjson != null">
        workJson = #{record.workjson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update teacher
    set id = #{record.id,jdbcType=INTEGER},
      jobNumber = #{record.jobnumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      accountId = #{record.accountid,jdbcType=INTEGER},
      imagerUrl = #{record.imagerurl,jdbcType=VARCHAR},
      workJson = #{record.workjson,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update teacher
    set id = #{record.id,jdbcType=INTEGER},
      jobNumber = #{record.jobnumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      accountId = #{record.accountid,jdbcType=INTEGER},
      imagerUrl = #{record.imagerurl,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.nix.lovedomain.model.Teacher">
    update teacher
    <set>
      <if test="jobnumber != null">
        jobNumber = #{jobnumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="accountid != null">
        accountId = #{accountid,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="imagerurl != null">
        imagerUrl = #{imagerurl,jdbcType=VARCHAR},
      </if>
      <if test="workjson != null">
        workJson = #{workjson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.nix.lovedomain.model.Teacher">
    update teacher
    set jobNumber = #{jobnumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      accountId = #{accountid,jdbcType=INTEGER},
      imagerUrl = #{imagerurl,jdbcType=VARCHAR},
      workJson = #{workjson,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.nix.lovedomain.model.Teacher">
    update teacher
    set jobNumber = #{jobnumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      accountId = #{accountid,jdbcType=INTEGER},
      imagerUrl = #{imagerurl,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>