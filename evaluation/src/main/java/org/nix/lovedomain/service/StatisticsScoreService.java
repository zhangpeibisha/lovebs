package org.nix.lovedomain.service;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.lang.Validator;import com.alibaba.fastjson.JSON;import com.fasterxml.jackson.core.JsonProcessingException;import org.nix.lovedomain.dao.business.*;import org.nix.lovedomain.dao.business.json.question.EvaluationQuestionnaireContent;import org.nix.lovedomain.dao.business.json.winding.PublishAttachInfo;import org.nix.lovedomain.dao.business.json.winding.QuestionList;import org.nix.lovedomain.dao.business.json.winding.StatisticsAttachInfor;import org.nix.lovedomain.dao.model.*;import org.nix.lovedomain.service.vo.StatisticsQuestionVo;import org.nix.lovedomain.service.vo.TeachRankVo;import org.nix.lovedomain.service.vo.TeachTaskVo;import org.nix.lovedomain.utils.ListUtils;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Set;import java.util.function.Consumer;/** * @author zhangpei * @version 1.0 * @since jdk8 * <p> * 总分  平均分  每项平均分  每个选项被多少人选了 */@Servicepublic class StatisticsScoreService {    @Resource    private StatisticsScoreBusinessMapper statisticsScoreBusinessMapper;    @Resource    private EvaluationQuestionnaireBusinessMapper evaluationQuestionnaireBusinessMapper;    @Resource    private PublishQuestionBusinessMapper publishQuestionBusinessMapper;    @Resource    private RankBusinessMapper rankBusinessMapper;    @Resource    private StudentBusinessMapper studentBusinessMapper;    @Resource    private TeacherService teacherService;    @Resource    private CourseBusinessMapper courseBusinessMapper;    @Resource    private FacultyBusinessMapper facultyBusinessMapper;    /**     * 创建生成一个评教卷统计结构，值对象     *     * @param id 发布的评教卷id     * @return 统计信息     */    public StatisticsQuestionVo findQuestionVo(Integer id) throws JsonProcessingException {        PublishQuestionnaireModel model = publishQuestionBusinessMapper.selectByPrimaryKey(id);        Validator.validateNotNull(model, "发布评教卷{}不存在", id);        // TODO: 检测数据是否需要更新（不能这样操作，但是在毕设的时候需要演示,不然时间不好控制）        checkUpdateStatistics(model);        // 获取发布评教卷的统计信息        PublishAttachInfo attachInfo = PublishAttachInfo.getBean(model);        Integer questionnaireId = model.getQuestionnaireId();        EvaluationQuestionnaireModel questionnaireModel = evaluationQuestionnaireBusinessMapper.selectByPrimaryKey(questionnaireId);        Validator.validateNotNull(questionnaireModel, "评教卷{}不存在", questionnaireId);        StatisticsQuestionVo statisticsQuestionVo = new StatisticsQuestionVo();        // 设置基础属性        statisticsQuestionVo.setTitle(questionnaireModel.getTitle());        Set<Integer> black = attachInfo.getBlack();        statisticsQuestionVo.setBlack(findStudentInfo(CollUtil.newArrayList(black)));        statisticsQuestionVo.setBlackNumber(black == null ? 0 : black.size());        // 设置平均分和总分        Double pqNaAvgScore = findPQNaAvgScore(id);        Double pqNaTotalScore = findPQNaTotalScore(id);        statisticsQuestionVo.setTotalScore(pqNaTotalScore);        statisticsQuestionVo.setAvgScore(pqNaAvgScore);        // 设置建议信息        statisticsQuestionVo.setAdviseList(attachInfo.getAdvice());        // 设置出席人数和计划人数        statisticsQuestionVo.setRealityAnswer(attachInfo.getAttend());        statisticsQuestionVo.setShouldAnswer(attachInfo.getPlan());        // 设置题目统计信息        StatisticsAttachInfor topicAttachInfor = findTopicAttachInfor(id);        StatisticsAttachInfor optionAttachInfor = findOptionAttachInfor(id);        List<StatisticsQuestionVo.TopicStatistics> topicStatisticsList                = StatisticsQuestionVo.createTopicStatisticsList(topicAttachInfor, optionAttachInfor);        statisticsQuestionVo.setTopicStatistics(topicStatisticsList);        return statisticsQuestionVo;    }    /**     * TODO deleteRank(facultyId,year,semester);方法在实际情况中，不能使用     * TODO statisticsDegree(facultyId,year,semester);方法在评教卷结束的时候自动统计     * 此处出现的数据为了展示毕设统计     *     * @param facultyId 学院自增id     * @param year      学年     * @param semester  学期     * @return     */    @Transactional(rollbackFor = Exception.class)    public TeachRankVo findFacultyTeachRankVo(Integer facultyId, Integer year, String semester) {        deleteRank(facultyId, year, semester);        statisticsDegree(facultyId, year, semester);        RankModel rank = findRank(facultyId, year, semester);        Validator.validateNotNull(rank, "学院{}在{}年{}.{}的排名统计信息不存在", facultyId, year, semester);        return createTeachRankVo(rank);    }    /**     * 创建一个排名的值对象     *     * @param rank 排名信息     * @return 排名值对象     */    public TeachRankVo createTeachRankVo(RankModel rank) {        Integer facultyId = rank.getFacultyId();        FacultyModel facultyModel = facultyBusinessMapper.selectByPrimaryKey(facultyId);        TeachRankVo teachRankVo = new TeachRankVo();        teachRankVo.setFacultyId(facultyId);        teachRankVo.setFacultyName(facultyModel.getName());        teachRankVo.setId(rank.getId());        teachRankVo.setRank(rank.getRank());        teachRankVo.setSemester(rank.getSemester());        teachRankVo.setYear(rank.getYear());        return teachRankVo;    }    /**     * 通过学院id+学年+学期找到一个统计信息     *     * @param facultyId 学院自增id     * @param year      学年     * @param semester  学期     * @return 排名信息     */    public RankModel findRank(Integer facultyId, Integer year, String semester) {        RankModel rankModel = new RankModel();        rankModel.setFacultyId(facultyId);        rankModel.setSemester(semester);        rankModel.setYear(year);        return rankBusinessMapper.selectOne(rankModel);    }    /**     * TODO：测试使用，原则上不能删除统计信息     * 每次产生排名都是期末的时候     * 删除学院统计信息（毕业设计展示使用）     *     * @param facultyId 学院id     * @param year      学年     * @param semester  学期     */    public void deleteRank(Integer facultyId, Integer year, String semester) {        RankModel rankModel = new RankModel();        rankModel.setFacultyId(facultyId);        rankModel.setSemester(semester);        rankModel.setYear(year);        rankBusinessMapper.delete(rankModel);    }    /**     * 通过教学任务id统计该任务的评教信息     *     * @param teachCourseId 教学任务id     */    @Transactional(rollbackFor = Exception.class)    public void statisticsByTeachCourse(String teachCourseId) throws JsonProcessingException {        PublishQuestionnaireModel selectParam = new PublishQuestionnaireModel();        selectParam.setTeachCourseId(teachCourseId);        PublishQuestionnaireModel questionnaireModel = publishQuestionBusinessMapper.selectOne(selectParam);        statistics(questionnaireModel.getId());    }    /**     * 统计一个发布的评教卷信息     *     * @param id 评教卷id     */    @Transactional(rollbackFor = Exception.class)    public void statistics(Integer id) throws JsonProcessingException {        PublishQuestionnaireModel model = publishQuestionBusinessMapper.selectByPrimaryKey(id);        statisticsAvgScore(model);        statisticsTotalScore(model);        statisticsItemAvgScore(model);        itemChoseAccount(model);    }    /**     * 统计一份问卷的总分     *     * @param publishQuestionnaireModel     * @return     */    public Integer statisticsTotalScore(PublishQuestionnaireModel publishQuestionnaireModel) {        PublishAttachInfo publishAttachInfo = PublishAttachInfo.getBean(publishQuestionnaireModel);        StatisticsScoreModel statisticsScoreModel = publishAttachInfo.statisticalAnswer(publishQuestionnaireModel);        return statisticsScoreBusinessMapper.insertSelective(statisticsScoreModel);    }    /**     * 问卷的平均分     * FIX  如果没有分，人填写过，则不允许插入统计成绩     *     * @param publishQuestionnaireModel     * @return     */    public Integer statisticsAvgScore(PublishQuestionnaireModel publishQuestionnaireModel) {        PublishAttachInfo publishAttachInfo = PublishAttachInfo.getBean(publishQuestionnaireModel);        StatisticsScoreModel statisticsScoreModel = publishAttachInfo.statisticsAvgScore(publishQuestionnaireModel);        return statisticsScoreBusinessMapper.insertSelective(statisticsScoreModel);    }    /**     * 问卷每一项的平均分     *     * @param publishQuestionnaireModel     * @return     */    public Integer statisticsItemAvgScore(PublishQuestionnaireModel publishQuestionnaireModel) throws JsonProcessingException {        PublishAttachInfo publishAttachInfo = PublishAttachInfo.getBean(publishQuestionnaireModel);        EvaluationQuestionnaireModel evaluationQuestionnaireModel = evaluationQuestionnaireBusinessMapper.selectByPrimaryKey(publishQuestionnaireModel.getQuestionnaireId());        EvaluationQuestionnaireContent contentBean = EvaluationQuestionnaireContent.getContentBean(evaluationQuestionnaireModel);        QuestionList questionList = QuestionList.toQuestionList(contentBean);        StatisticsScoreModel statisticsScoreModel = publishAttachInfo.statisticsItemScore(publishQuestionnaireModel, questionList);        return statisticsScoreBusinessMapper.insertSelective(statisticsScoreModel);    }    /**     * 每一项选择的人数     *     * @param publishQuestionnaireModel     * @return     */    public Integer itemChoseAccount(PublishQuestionnaireModel publishQuestionnaireModel) {        PublishAttachInfo publishAttachInfo = PublishAttachInfo.getBean(publishQuestionnaireModel);        EvaluationQuestionnaireModel evaluationQuestionnaireModel = evaluationQuestionnaireBusinessMapper.selectByPrimaryKey(publishQuestionnaireModel.getQuestionnaireId());        EvaluationQuestionnaireContent contentBean = EvaluationQuestionnaireContent.getContentBean(evaluationQuestionnaireModel);        QuestionList questionList = QuestionList.toQuestionList(contentBean);        StatisticsScoreModel statisticsScoreModel = publishAttachInfo.statisticsItemChose(publishQuestionnaireModel, questionList);        return statisticsScoreBusinessMapper.insertSelective(statisticsScoreModel);    }    /**     * 统计一个学院的排名     *     * @param facultyId 学院id     * @param year      年份     * @param semester  学期     * @return     */    public Integer statisticsDegree(Integer facultyId, Integer year, String semester) {        // 获取指定学院指定年份指定学期下发布的问卷        List<Integer> ids = publishQuestionBusinessMapper.selectIdsByCondition(facultyId, year, semester);        List<StatisticsScoreModel> list = statisticsScoreBusinessMapper.selectByCollection(ids);        list.sort((StatisticsScoreModel s1, StatisticsScoreModel s2) -> s2.getScore().compareTo(s1.getScore()));        RankModel rankModel = new RankModel();        rankModel.setFacultyId(facultyId);        rankModel.setYear(year);        rankModel.setSemester(semester);        rankModel.addRankItem(createRankItems(list));        rankModel.toContent();        return rankBusinessMapper.insertSelective(rankModel);    }    /**     * 生成排名信息     *     * @param scoreModels 统计信息集合     * @return     */    public List<RankModel.RankItem> createRankItems(List<StatisticsScoreModel> scoreModels) {        Validator.validateFalse(CollUtil.isEmpty(scoreModels), "统计信息为空");        List<RankModel.RankItem> result = new ArrayList<>(scoreModels.size());        scoreModels.forEach(statisticsScoreModel -> result.add(createRankItem(statisticsScoreModel)));        return result;    }    /**     * 创建一个排名的展示数据     *     * @param scoreModel type=2的统计数据（平均分统计）     * @return 一个排名单位的详细信息     */    public RankModel.RankItem createRankItem(StatisticsScoreModel scoreModel) {        // 老师信息        Integer teacherAccountId = scoreModel.getTeacherAccountId();        TeacherModel teacher = teacherService.findTeacherByAccountId(teacherAccountId);        // 课程信息        Integer courseId = scoreModel.getCourseId();        CourseModel courseModel = courseBusinessMapper.selectByPrimaryKey(courseId);        // 发布的评教卷信息        Integer publishQuestionnaireId = scoreModel.getPublishQuestionnaireId();        PublishQuestionnaireModel publishQuestionnaireModel = publishQuestionBusinessMapper.selectByPrimaryKey(publishQuestionnaireId);        RankModel.RankItem rankItem = new RankModel.RankItem();        // 课程信息        rankItem.setCourseId(courseId);        rankItem.setCourseName(courseModel.getName());        // 评教表id        rankItem.setPublishQuestionId(publishQuestionnaireId);        // 教学任务id        rankItem.setTeachCourseId(publishQuestionnaireModel.getTeachCourseId());        // 获取总分        rankItem.setAvgScore(scoreModel.getScore());        // 获取老师信息        rankItem.setTeacherAccountId(teacherAccountId);        rankItem.setTeacherName(teacher.getName());        return rankItem;    }    /**     * 获取统计信息     *     * @param id   发布问卷的id     * @param type 统计类型     * @return     */    public StatisticsScoreModel getPQNa(Integer id, Integer type) {        return statisticsScoreBusinessMapper.getPQNa(id, type);    }    /**     * 发现评教卷的总分     *     * @param id 发布问卷的id     * @return 总分     */    public Double findPQNaTotalScore(Integer id) {        StatisticsScoreModel pqNa = getPQNa(id, 1);        Validator.validateNotNull(pqNa, "发布评教卷{}的统计总分不存在", id);        return pqNa.getScore();    }    /**     * 发现评教卷的平均分     *     * @param id 发布问卷的id     * @return 总分     */    public Double findPQNaAvgScore(Integer id) {        StatisticsScoreModel pqNa = getPQNa(id, 2);        Validator.validateNotNull(pqNa, "发布评教卷{}的统计的平均分不存在", id);        return pqNa.getScore();    }    /**     * 发现评教卷的题目的信息     *     * @param id 发布的评教卷自增id     * @return 统计信息     */    public StatisticsAttachInfor findTopicAttachInfor(Integer id) {        StatisticsScoreModel pqNa = getPQNa(id, 3);        Validator.validateNotNull(pqNa, "发布评教卷{}的统计的题目统计不存在", id);        return StatisticsAttachInfor.toStatisticsAttachInfor(pqNa);    }    /**     * 发现评教卷的题目的选项统计信息     *     * @param id 发布的评教卷自增id     * @return 统计信息     */    public StatisticsAttachInfor findOptionAttachInfor(Integer id) {        StatisticsScoreModel pqNa = getPQNa(id, 4);        Validator.validateNotNull(pqNa, "发布评教卷{}的统计的题目统计不存在", id);        return StatisticsAttachInfor.toStatisticsAttachInfor(pqNa);    }    /**     * 填充学生信息     *     * @param accountIds 账号id信息     * @return 学生信息     */    public List<StatisticsQuestionVo.StudentInfo> findStudentInfo(List<Integer> accountIds) {        if (CollUtil.isEmpty(accountIds)) {            return new ArrayList<>();        }        List<StudentModel> studentModels = studentBusinessMapper.findStudentModelByAccountIds(ListUtils.lsitIdsToString(accountIds));        if (CollUtil.isEmpty(studentModels)) {            return new ArrayList<>();        }        List<StatisticsQuestionVo.StudentInfo> studentInfos = new ArrayList<>(studentModels.size());        studentModels.forEach(studentModel -> {            Integer accountId = studentModel.getAccountId();            String studentId = studentModel.getStudentId();            String name = studentModel.getName();            StatisticsQuestionVo.StudentInfo studentInfo = new StatisticsQuestionVo.StudentInfo();            studentInfo.setAccountId(accountId);            studentInfo.setName(name);            studentInfo.setStudentId(studentId);            studentInfos.add(studentInfo);        });        return studentInfos;    }    /**     * (这个更新在统计分数表里面)     * 检测这个发布卷是否结束，若未结束就统计     * 信息（为了方便演示，不然我的做个定时器去扫描），若到达结束时间     * 则就不用进行更新了     *     * @param model 发布的评教表     */    @Transactional(rollbackFor = Exception.class)    public void checkUpdateStatistics(PublishQuestionnaireModel model) throws JsonProcessingException {        Date endRespondTime = model.getEndRespondTime();        // 如果没用到达结束时间则需要更新统计数据        if (endRespondTime.getTime() > System.currentTimeMillis()) {            // 还需要删除历史数据            StatisticsScoreModel scoreModel = new StatisticsScoreModel();            Integer publishQuestionnaireId = model.getId();            scoreModel.setPublishQuestionnaireId(publishQuestionnaireId);            scoreModel.setScore(null);            statisticsScoreBusinessMapper.delete(scoreModel);            // 在插入            statistics(publishQuestionnaireId);            checkPublishAttachInfoUpdateStatistics(model, PublishAttachInfo.getBean(model));        }    }    /**     * 更新发布卷中的信息     *     * @param model      发布卷     * @param attachInfo 统计信息     * @return 更新的信息     */    public PublishAttachInfo checkPublishAttachInfoUpdateStatistics(PublishQuestionnaireModel model,                                                                    PublishAttachInfo attachInfo) {        // 为了快速见效的后遗症呀= =        List<PublishAttachInfo.Advice> advice = attachInfo.getAdvice();        if (!CollUtil.isEmpty(advice)) {            attachInfo.setAdvice(null);        }        attachInfo.statistical();        model.setStatistics(JSON.toJSONString(attachInfo));        publishQuestionBusinessMapper.updateByPrimaryKeySelective(model);        return PublishAttachInfo.getBean(model);    }}